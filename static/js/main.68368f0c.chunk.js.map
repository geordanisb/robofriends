{"version":3,"sources":["ErrorBoundry.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundry","state","hasError","error","info","this","setState","props","children","Component","Card","name","id","email","alt","src","CardList","cardsComponent","robots","map","r","key","SearchBox","searchChange","style","backgroundColor","type","placeholder","onChange","Scroll","overflow","height","App","onSearchCahnge","event","searchField","target","value","fetch","fr","json","data","robotsFiltered","filter","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sOAoBeA,E,kDAjBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAS,GAHH,E,8DAMIC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OADiBG,KAAKJ,MAAjBC,SAEM,6CACJG,KAAKE,MAAMC,a,GAdCC,aCYZC,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,GAAGC,EAAU,EAAVA,MACnB,OACI,6BACI,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKD,GACL,2BAAIE,MCOLG,EAZC,SAAC,GAAY,IAErBC,EAFoB,EAAVC,OAEcC,KAAI,SAAAC,GAC5B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAER,GAAIA,GAAIQ,EAAER,GAAID,KAAMS,EAAET,KAAME,MAAOO,EAAEP,WAE7D,OACI,6BACKI,ICIEK,EAZE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACf,OACI,yBAAKC,MAAO,CAACC,gBAAgB,SACzB,2BACIC,KAAK,SACLC,YAAY,SACZC,SAAUL,MCAXM,EANA,SAACtB,GACZ,OAAO,yBAAKiB,MAAO,CAACM,SAAS,SAASC,OAAO,UACpCxB,EAAMC,WCoCJwB,E,kDAjCX,aAAc,IAAD,8BACT,gBAWJC,eAAiB,SAACC,GACd,EAAK5B,SAAS,CAAC6B,YAAYD,EAAME,OAAOC,SAXxC,EAAKpC,MAAQ,CACTiB,OAAO,GACPiB,YAAY,IAJP,E,kMAQMG,MAAM,8C,cAAjBC,E,gBACaA,EAAGC,O,OAAhBC,E,OACJpC,KAAKC,SAAS,CAACY,OAAOuB,I,qIAKhB,IAAD,OACCC,EAAiBrC,KAAKJ,MAAMiB,OAAOyB,QAAO,SAAAvB,GAC5C,OAAOA,EAAET,KAAKiC,cAAcC,SAAS,EAAK5C,MAAMkC,YAAYS,kBAEhE,OACI,6BACI,4CACA,kBAAC,EAAD,CAAWrB,aAAclB,KAAK4B,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUf,OAAQwB,W,GA1BxBI,IAAMrC,WCMJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5D,GACL6D,QAAQ7D,MAAMA,EAAM8D,a","file":"static/js/main.68368f0c.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor() {\n        super();\n        this.state = {\n            hasError:false\n        }\n    }\n    componentDidCatch(error,info){\n        this.setState({hasError:true});\n    }\n    render() {\n        let {hasError} = this.state;\n        if(hasError)\n            return <h1>OPP! an error</h1>  \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nconst Card = ({name,id,email}) =>{\n    return (\n        <div>\n            <img alt=\"robots\" src={`https://robohash.org/${id}?size=100x100`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst CardList= ({robots})=>{\n    // if(true)throw new Error('err1');\n    let cardsComponent = robots.map(r=>{\n        return <Card key={r.id} id={r.id} name={r.name} email={r.email}/>\n    })\n    return (\n        <div>\n            {cardsComponent}\n        </div>    \n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox =({searchChange})=>{\n    return (\n        <div style={{backgroundColor:'blue'}}>\n            <input \n                type=\"search\" \n                placeholder=\"Search\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props)=>{\n    return <div style={{overflow:'scroll',height:'500px'}}>\n            {props.children}\n        </div>\n}\n\nexport default Scroll;","import React from 'react';\nimport ErrorBoundry from './ErrorBoundry';\nimport CardList from './CardList'\nimport SearchBox from './SearchBox'\nimport Scroll from './Scroll'\n\nclass App extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            robots:[],\n            searchField:'',\n        };\n    }\n    async componentDidMount(){\n        let fr = await fetch('https://jsonplaceholder.typicode.com/users');\n        let data = await fr.json();\n        this.setState({robots:data});\n    }\n    onSearchCahnge = (event)=>{\n        this.setState({searchField:event.target.value});\n    }\n    render() {\n        const robotsFiltered = this.state.robots.filter(r=>{\n            return r.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n        })\n        return (\n            <div>\n                <h1>Robo Friends</h1>\n                <SearchBox searchChange={this.onSearchCahnge}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={robotsFiltered}/>\n                    </ErrorBoundry>\n                </Scroll>\n                \n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}